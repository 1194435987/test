<!DOCTYPE html>
<head>
    <meta charset="UTF-8">
    <title>
        
    </title>
    <style>
        .parent{
            display: grid;
            grid-template-columns: repeat(15,1fr);
            grid-template-rows: repeat(15,1fr);
            height: 90vh; 
           
            background-color: blanchedalmond;
        }
        .child{
            background-color: lightblue;
            border:solid 5px black;
            grid-row-start: 2;
            grid-row-end: 16;
            text-align: center;
               
        }
        .man{
            grid-column-start: 2;
            grid-column-end: 8;
            
            }
        .woman{
            grid-column-start: 9;
            grid-column-end: 15;

        }
        #wall{
            grid-column-start: 8;
        }
        .zoom1{
            display: grid;
            grid-gap: 10px;
            grid-template-columns: repeat(7,1fr);
           
            background-color: rgb(177, 219, 247);
            height: 100%;
            grid-template-areas:
            
            'ms1 . . . . m1 m1'
            '. . . . . m1 m1'
            'ms2 . . . . m2 m2'
            '. . . . . m2 m2'
            'ms3 . . . . m3 m3'
            '. . . . .  m3 m3'
            'ms4 . . . . m4 m4'
            '. . . . .m4 m4'
            'ms5 . . .  . m5 m5'
            
            '. . . . . m5 m5'
            '. . . . . . .'
        }

        .zoom2{
            display: grid;
            grid-gap: 10px;
            grid-template-columns: repeat(7,1fr);
          
            background-color:rgb(243, 190, 199);
            height: 100%;
            grid-template-areas:
            
            'n1 n1 . . . n10 n10'
            'n1 n1 . . . n10 n10'
            'n2 n2 . . . n9 n9'
            'n2 n2 . . . n9 n9'
            'n3 n3 . . . n8 n8'
            'n3 n3 . . . n8 n8'
            'n4 n4 . . . n7 n7'
            'n4 n4 . . . n7 n7'
            'n5 n5 . . . n6 n6'            
            'n5 n5 . . . n6 n6'
            '. . . . . . .'
        }

        .squatting-pot{
            text-align: center;
            background-color: rgb(140, 248, 140);
            border: solid 1px black;
        }
  /*      .toielt{
            width: 40vw;
            height: 80vh;
            margin: 3vw;
            background-color: lightblue;
            float: left;
            text-align: center;
        }
        */
        #m1{grid-area: m1;}
        #m2{grid-area: m2;}
        #m3{grid-area: m3;}
        #m4{grid-area: m4;}
        #m5{grid-area: m5;}
        #ms1{grid-area: ms1;}
        #ms2{grid-area: ms2;}
        #ms3{grid-area: ms3;}
        #ms4{grid-area: ms4;}
        #ms5{grid-area: ms5;}


        
        #n1{grid-area: n1;}
        #n2{grid-area: n2;}
        #n3{grid-area: n3;}
        #n4{grid-area: n4;}
        #n5{grid-area: n5;}
        #n6{grid-area: n6;}
        #n7{grid-area: n7;}
        #n8{grid-area: n8;}
        #n9{grid-area: n9;}
        #n10{grid-area: n10;}
    </style>
</head>
<body class="parent">
    <div class="child man">
        <div class="zoom1">
            <div class="squatting-pot" id = "m1">坑位1</div>
            <div class="squatting-pot" id = "m2">坑位2</div>
            <div class="squatting-pot" id = "m3">坑位3</div>
            <div class="squatting-pot" id = "m4">坑位4</div>
            <div class="squatting-pot" id = "m5">坑位5</div>

            <div class="squatting-pot" id = "ms1">小便池1</div>
            <div class="squatting-pot" id = "ms2">小便池2</div>
            <div class="squatting-pot" id = "ms3">小便池3</div>
            <div class="squatting-pot" id = "ms4">小便池4</div>
            <div class="squatting-pot" id = "ms5">小便池5</div>
      
        </div>
    </div>
    <div class="child" id = "wall"><p>wall</p></div>
    <div class="child woman">
        <div class="zoom2">
            <div class="squatting-pot" id = "n1">坑位1</div>
            <div class="squatting-pot" id = "n2">坑位2</div>
            <div class="squatting-pot" id = "n3">坑位3</div>
            <div class="squatting-pot" id = "n4">坑位4</div>
            <div class="squatting-pot" id = "n5">坑位5</div>

            <div class="squatting-pot" id = "n6">坑位6</div>
            <div class="squatting-pot" id = "n7">坑位7</div>
            <div class="squatting-pot" id = "n8">坑位8</div>
            <div class="squatting-pot" id = "n9">坑位9</div>
            <div class="squatting-pot" id = "n10">坑位10</div>
      
        </div>
    </div>

</body>
<script>
'use strict'
//数组
var arrtest = [];//测试使用
var peopleArr = [];//人群列表
var lineUpArr = [];//在排队的人
var useArr = [];//使用厕位的人
var toieltArr = [[],[],[]];//厕所数组
var freeArr = [[],[],[]];//空闲厕位数组
var test =0;
//全局变量
var totalTime =7200;//总时间2h
var nowTime = 0;
var blockingTime_pot = 0;//男小便池堵塞时间
var blockingTime_men = 0;//男坑位堵塞时间
var blockingTime_women = 0;//女坑位堵塞时间
var blockingTime = 0;//总堵塞时间
var interval = 100;//出生间隔 人流量
//厕所构造函数
//男小便池
function Pot(name) {
    this.name = name;
    this.state = 0;//厕所状态 0代表空闲 1代表占用
    this.free = 0;//厕所开放时间 被占用后何时开放
    Pot.prototype.freeTime = 0;//厕所的空闲时长;
    Pot.prototype.rest = 0;//厕位的空闲个数；\
    //检查厕所状态 1到达开放时间开放， 2返回空闲个数 3.记录空闲时间，堵塞时间，!!! 推入空闲数组推入freeArr[[],[],[]]
    Pot.prototype.check = function () {
        var arr=[];
        toieltArr[0].forEach(function (t) {
            if(t.free==nowTime){t.state=0};//到开放时间开放
  
            blockingTime_pot =nowTime-t.__proto__.freeTime;
            
            if(t.state==0){
                arr.push(t);
                
       //         t.freeTime++;
      
            }
        })
        freeArr[0]=arr;//将空闲坑位排入空闲数组
        if(Pot.prototype.rest>0){Pot.prototype.freeTime++;}//在此判断导致厕位满但是没有使用需求时也表示堵塞 其实是刚刚好适用
        Pot.prototype.rest =freeArr[0].length;//返回空闲个数
    }
}

function Men(name) {
    this.name = name;
    this.state = 0;//厕所状态 0代表空闲 1代表占用
    this.free = 0;//厕所开放时间 被占用后何时开放
    Men.prototype.freeTime = 0;//厕所的空闲时长;
    Men.prototype.rest = 0;//厕位的空闲个数；\
    //检查厕所状态 1到达开放时间开放， 2返回空闲个数 3.记录空闲时间，堵塞时间，推入空闲数组推入freeArr[[],[],[]]
    Men.prototype.check = function () {
        var arr=[];
        toieltArr[1].forEach(function (t) {
            if(t.free==nowTime){t.state=0};//到开放时间开放
            
            blockingTime_men =nowTime-t.__proto__.freeTime;
            
            if(t.state==0){
                arr.push(t);
                
       //         t.freeTime++;
      
            }
        })
        freeArr[1]=arr;//将空闲坑位排入空闲数组
        if(Men.prototype.rest>0){Men.prototype.freeTime++;}
        Men.prototype.rest =freeArr[1].length;//返回空闲个数
    }
}

function Women(name) {
    this.name = name;
    this.state = 0;//厕所状态 0代表空闲 1代表占用
    this.free = 0;//厕所开放时间 被占用后何时开放
    Women.prototype.freeTime = 0;//厕所的空闲时长;
    Women.prototype.rest = 0;//厕位的空闲个数；\
    //检查厕所状态 1到达开放时间开放， 2返回空闲个数 3.记录空闲时间，堵塞时间，推入空闲数组推入freeArr[[],[],[]]
    Women.prototype.check = function () {
        var arr=[];
        toieltArr[2].forEach(function (t) {
            if(t.free==nowTime){t.state=0};//到开放时间开放
            blockingTime_women =nowTime-t.__proto__.freeTime;
            if(t.state==0){
                arr.push(t);
      //          t.freeTime++;

            }
        })
        freeArr[2]=arr;//将空闲坑位排入空闲数组
        if(Women.prototype.rest>0){Women.prototype.freeTime++;}
        Women.prototype.rest =freeArr[2].length;//返回空闲个数
    }
}

//人 构造函数
function People(name,gender,state,time,birth) {
    this.name = name;
    this.gender = gender;//0女 1男
    this.state = state ;//0 小 1大
    this.time = time;//占用坑位时长
    this.usetoielt = "还未使用厕所";
    this.lineUp = "否"
    this.birth = birth;//出生时间
    this.lineUpTime = 0;//排队时间
    People.prototype.find = function (type) {//type ：0 为小便池 1为男坑 2为女坑
        var self = this;
        
        if(freeArr[type][0]){//如果对应的空闲数列首位存在 
   /*       
            freeArr[type].forEach(function (t,index) {
                if(t.state = 1){console.log("错误 "+t.name+","+test++)}
                t.state = 1;
                t.__proto__.rest--;
                console.log("移除了第"+index+" 个");
                freeArr[type].shift();
                t.free = self.time+nowTime;
                self.lineUpTime = nowTime-self.birth
                self.usetoielt = t.name;
            })*/

            for(var i=0;i<freeArr[type].length;i++){
                var t = freeArr[type][0];
                if(t.state==1){throw("错误"+t)}
                t.state =1;
                freeArr[type][0].__proto__.rest--;
                freeArr[type].shift();
                t.free = self.time+nowTime;
                self.lineUpTime = nowTime-self.birth
                self.usetoielt = t.name;
            }

        }
        //没有找到此人对应的坑位 即占满 则将其插入排队数组
        else{
            lineUpArr.push(self);//将没有位置的人加入到排队队列
            self.lineUp="排队过";
            self.lineUpTime="排队中"
 
         //  console.log("排队队列");
         //  console.log(lineUpArr);
        }
        
    }
}


//建造厕所
function bulidToielt(pot,men,women) {
    for(var i=0;i<pot;i++){
        toieltArr[0].push(new Pot("小便池"+(i+1)));//生成小便池
    }
    for(i=0;i<men;i++){
        toieltArr[1].push(new Men("男坑"+(i+1)));//生成男坑
    }
    for(i=0;i<women;i++){
        toieltArr[2].push(new Women("女坑"+(i+1)));//生成女坑
    }
}
bulidToielt(3,5,5);
console.log(toieltArr);//检验一下

// 造人
function birth(t) {//造人间隔时间
    interval = t;
    var min ,max;
    var gender,state,time,birth;
    for(var i = 0,n=1;i<=totalTime;i+=interval,n++){
        gender = Math.floor(Math.random()*2);
        // state = Math.floor(Math.random()*2); //小便频次提高
        state = (function () {
            if(Math.random()<0.8){
                return 0;
            }
            return 1;
        })()
        if(gender == 1){
            if(state == 0 ){min = 30;max=120}
            else {min = 6*60;max = 15*60;}
        }
        else {
            if(state ==0) {min = 1*60;max = 3*60}
            else {min = 6*60;max = 20*60}
        }
        time = Math.round(Math.random()*(max-min)+min)
        birth = i;
        peopleArr.push(new People(n,gender,state,time,birth))

    }
}
birth(interval);//每100s 出生一人
console.log(peopleArr);

// 模拟开始
function run() {
    var seed =0;//第一个人
    var allrest = 0;//总空闲个数
    for(nowTime=0;nowTime<=totalTime;nowTime++){
        if(nowTime==0||nowTime%interval==0){//将新生儿推入使用数列？？？推入到排队队列？
            useArr.push(peopleArr[seed]);
            seed++;
        }


        /*toieltArr.forEach(function (t) {
          //  t[0].__proto__.freeTime++;
            t.forEach(function (y) {
                y.check();
            })
            if(t[0].__proto__.rest>0){t[0].__proto__.freeTime++;}
        })*/
        Pot.prototype.check();
        Men.prototype.check();
        Women.prototype.check();
        //是否存在空位
        allrest =Pot.prototype.rest+Men.prototype.rest+Women.prototype.rest;
        if(allrest==0){//不存在空位
            if(peopleArr[seed-1].birth==nowTime){//新生儿 -
                peopleArr[seed-1].lineUp="排队过";
                peopleArr[seed-1].lineUpTime="排队中";
                lineUpArr.push(peopleArr[seed-1]);//加入排队队列
            }
            continue;
        }//如果不存在空位则跳出循环
        
        //存在空位
        //存在排队队列？

        if(lineUpArr[0]){//有问题 

           
            for(var i=0,len=lineUpArr.length,n=0,li=0;i<len;i++){
                li = i-n;
                if(lineUpArr[li].gender==1){
                    if(lineUpArr[li].state==0){
                        if(Pot.prototype.rest>0){
                            useArr.splice(n,0,lineUpArr[li]);
                            lineUpArr.splice(li,1)//在排队队列中删除此人
                          //  Pot.prototype.rest--//如果选取到人则减去一个空闲个数
                            n++;
                            continue;
                        }
                    }
                }
                if(lineUpArr[li].gender==1){
                    if(lineUpArr[li].state==1){
                        if(Men.prototype.rest>0){
                            useArr.splice(n,0,lineUpArr[li]);
                            lineUpArr.splice(li,1)//在排队队列中删除此人
                            n++;
                        //    Men.prototype.rest--//如果选取到人则减去一个空闲个数
                            continue;
                        }
                    }
                }
                if(lineUpArr[li].gender==0){

                        if(Women.prototype.rest>0){
                            useArr.splice(n,0,lineUpArr[li]);
                            lineUpArr.splice(li,1)//在排队队列中删除此人
                            n++;
                        //    Women.prototype.rest--//如果选取到人则减去一个空闲个数
                            continue;
                        }
                    
                }


            }



        }

//---------------

        if(!useArr[0]){continue;}
        useArr.forEach(function (p) {
            if(p.gender==1){
                if(p.state==0){
                    p.find(0);
                }
                else{p.find(1);}
            }
            if(p.gender==0){
                p.find(2);
            }
            else{arrtest.push(p);}//测试 将其他未被安排的人推出到测试数组
        })

        //将useArr 清空 因为在find中将没有使用上厕所的人插入到排队队列，且使用完厕所的人也需清空
        useArr=[];
        // 验证 ：如果一个坑位在占用时间是有人使用则报错
    

    }

}
run();
//测试
//寻找排队过但未使用
arrtest=[];
peopleArr.forEach(function (p,index) {
    if(p.lineUp=="排队过"){
        arrtest.push(p);     
    }
})
console.log("排队过")
console.log(arrtest);
console.log("pot堵塞时间:"+blockingTime_pot);
console.log("men堵塞时间:"+blockingTime_men);
console.log("women堵塞时间:"+blockingTime_women)




//console.log(peopleArr);
//console.log("nowtime:"+nowTime);
//console.log(toieltArr)
</script>
</html>
